# -*- coding: utf-8 -*-
"""decision_tree/random_forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jklyYOq8x59vvdtl2NKZOn5955kPMd2B
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="whitegrid", context="notebook")
!pip install category_encoders

df = pd.read_csv("/content/StudentsPerformance.csv")

df.head()

df.columns

df.describe()

df.isnull().sum()

fig,axs = plt.subplots(2,2,figsize=(20,8))
#create histogram
axs[0][0].hist(df['math score'],bins=20)
axs[0][1].hist(df['reading score'],bins=20)
axs[1][0].hist(df['writing score'],bins=20)

#setting title
axs[0][0].set_title('math score')
axs[0][1].set_title('reading score')
axs[1][0].set_title('writing score')
fig.suptitle("Exam scores")

columns = ["none", "completed"]
df["test preparation course"].value_counts()
n_sample = 358
col_types = df["test preparation course"]
random_samples = {}
for col in columns:
    random_index = np.random.choice(df[col_types == col].index, size=n_sample, replace=False)
    random_samples[col] = df.iloc[random_index]
df_balanced = pd.concat(random_samples.values(), ignore_index=True)

"""## Machine learning model"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, accuracy_score, ConfusionMatrixDisplay
from sklearn.preprocessing import StandardScaler

import category_encoders as ce

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

X = df_balanced.drop(['test preparation course'], axis=1)
y = df_balanced['test preparation course']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

num_variables = [col for col in X_train.columns if X_train[col].dtypes != object]
encoder = ce.OrdinalEncoder(cols = [col for col in X_train.columns if X_train[col].dtypes == object])
sc_x = StandardScaler()

X_train = encoder.fit_transform(X_train)
X_test = encoder.fit_transform(X_test)

numeric_scaler_train = sc_x.fit_transform(X_train[num_variables].values)
numeric_scaler_test = sc_x.fit_transform(X_test[num_variables].values)

for idx, feature in enumerate(num_variables):
    X_train[feature] = numeric_scaler_train[:, idx]
    X_test[feature] = numeric_scaler_test[:, idx]
X_train.head()

"""### Decision Tree"""

#Training the data
tree = DecisionTreeClassifier(max_depth = 12, random_state = 42)
tree.fit(X_train, y_train)
y_train_pred_tree = tree.predict(X_train)
y_test_pred_tree = tree.predict(X_test)

# Metrics
train_accuracy_tree = accuracy_score(y_train, y_train_pred_tree)
test_accuracy_tree = accuracy_score(y_test, y_test_pred_tree)

print('Train accuracy:', np.round(train_accuracy_tree, 4))
print('Test accuracy:', np.round(test_accuracy_tree, 4))

cm = confusion_matrix(y_test, y_test_pred_tree, labels=tree.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=tree.classes_)
disp.plot(cmap="GnBu")
plt.show()

"""### Random forest"""

#Training the model
rf = RandomForestClassifier(n_estimators = 20, random_state = 42)
rf.fit(X_train, y_train)
y_train_pred_rf = rf.predict(X_train)
y_test_pred_rf = rf.predict(X_test)

#Metrics
train_accuracy_rf = accuracy_score(y_train, y_train_pred_rf)
test_accuracy_rf = accuracy_score(y_test, y_test_pred_rf)

print('Train accuracy:', np.round(train_accuracy_rf,4))
print('Test accuracy:', np.round(test_accuracy_rf,4))

cm = confusion_matrix(y_test, y_test_pred_rf, labels=rf.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rf.classes_)
disp.plot(cmap="GnBu")
plt.show()